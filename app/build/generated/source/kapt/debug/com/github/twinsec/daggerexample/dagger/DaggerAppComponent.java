// Generated by Dagger (https://google.github.io/dagger).
package com.github.twinsec.daggerexample.dagger;

import android.app.Activity;
import android.app.Application;
import android.content.SharedPreferences;
import com.github.twinsec.daggerexample.App;
import com.github.twinsec.daggerexample.App_MembersInjector;
import com.github.twinsec.daggerexample.MainActivity;
import com.github.twinsec.daggerexample.MainActivity_MembersInjector;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.Cache;
import okhttp3.OkHttpClient;

public final class DaggerAppComponent implements AppComponent {
  private Provider<Application> provideApplicationProvider;

  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private Provider<Cache> provideOkHttpCacheProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<ActivitiesModule_ContributeMainActivityInjector.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideApplicationProvider =
        DoubleCheck.provider(AppModule_ProvideApplicationFactory.create(builder.appModule));
    this.provideSharedPreferencesProvider =
        DoubleCheck.provider(
            AppModule_ProvideSharedPreferencesFactory.create(
                builder.appModule, provideApplicationProvider));
    this.provideOkHttpCacheProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideOkHttpCacheFactory.create(
                builder.networkModule, provideApplicationProvider));
    this.provideOkHttpClientProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideOkHttpClientFactory.create(
                builder.networkModule, provideOkHttpCacheProvider));
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<
            ActivitiesModule_ContributeMainActivityInjector.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivitiesModule_ContributeMainActivityInjector.MainActivitySubcomponent.Builder
              get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
  }

  @Override
  public SharedPreferences sharedPreference() {
    return provideSharedPreferencesProvider.get();
  }

  @Override
  public OkHttpClient httpClient() {
    return provideOkHttpClientProvider.get();
  }

  @Override
  public void inject(App app) {
    injectApp(app);
  }

  @Override
  public MainActivitySubomponent.Builder mainActivityComponent() {
    return new MainActivitySubomponentBuilder();
  }

  private App injectApp(App instance) {
    App_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  public static final class Builder {
    private AppModule appModule;

    private NetworkModule networkModule;

    private Builder() {}

    public AppComponent build() {
      if (appModule == null) {
        throw new IllegalStateException(AppModule.class.getCanonicalName() + " must be set");
      }
      if (networkModule == null) {
        throw new IllegalStateException(NetworkModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }
  }

  private final class MainActivitySubomponentBuilder implements MainActivitySubomponent.Builder {
    @Override
    public MainActivitySubomponent build() {
      return new MainActivitySubomponentImpl(this);
    }
  }

  private final class MainActivitySubomponentImpl implements MainActivitySubomponent {
    private MainActivitySubomponentImpl(MainActivitySubomponentBuilder builder) {}

    @Override
    public MainActivity inject(MainActivity activity) {
      return injectMainActivity(activity);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectSharedPreferences(
          instance, DaggerAppComponent.this.provideSharedPreferencesProvider.get());
      MainActivity_MembersInjector.injectHttpClient(
          instance, DaggerAppComponent.this.provideOkHttpClientProvider.get());
      return instance;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivitiesModule_ContributeMainActivityInjector.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public ActivitiesModule_ContributeMainActivityInjector.MainActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivitiesModule_ContributeMainActivityInjector.MainActivitySubcomponent {
    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectSharedPreferences(
          instance, DaggerAppComponent.this.provideSharedPreferencesProvider.get());
      MainActivity_MembersInjector.injectHttpClient(
          instance, DaggerAppComponent.this.provideOkHttpClientProvider.get());
      return instance;
    }
  }
}
