// Generated by Dagger (https://google.github.io/dagger).
package com.github.twinsec.daggerexample.dagger;

import android.app.Application;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Cache;

public final class NetworkModule_ProvideOkHttpCacheFactory implements Factory<Cache> {
  private final NetworkModule module;

  private final Provider<Application> appProvider;

  public NetworkModule_ProvideOkHttpCacheFactory(
      NetworkModule module, Provider<Application> appProvider) {
    this.module = module;
    this.appProvider = appProvider;
  }

  @Override
  public Cache get() {
    return provideInstance(module, appProvider);
  }

  public static Cache provideInstance(NetworkModule module, Provider<Application> appProvider) {
    return proxyProvideOkHttpCache(module, appProvider.get());
  }

  public static NetworkModule_ProvideOkHttpCacheFactory create(
      NetworkModule module, Provider<Application> appProvider) {
    return new NetworkModule_ProvideOkHttpCacheFactory(module, appProvider);
  }

  public static Cache proxyProvideOkHttpCache(NetworkModule instance, Application app) {
    return Preconditions.checkNotNull(
        instance.provideOkHttpCache(app),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
