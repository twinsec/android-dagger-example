// Generated by Dagger (https://google.github.io/dagger).
package com.github.twinsec.daggerexample.dagger;

import com.github.twinsec.daggerexample.MainActivity;
import com.github.twinsec.daggerexample.MainActivity_MembersInjector;
import dagger.internal.Preconditions;

public final class DaggerMainActivityComponent implements MainActivityComponent {
  private AppComponent appComponent;

  private DaggerMainActivityComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.appComponent = builder.appComponent;
  }

  @Override
  public MainActivity inject(MainActivity activity) {
    return injectMainActivity(activity);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectSharedPreferences(
        instance,
        Preconditions.checkNotNull(
            appComponent.sharedPreference(),
            "Cannot return null from a non-@Nullable component method"));
    MainActivity_MembersInjector.injectHttpClient(
        instance,
        Preconditions.checkNotNull(
            appComponent.httpClient(), "Cannot return null from a non-@Nullable component method"));
    return instance;
  }

  public static final class Builder {
    private AppComponent appComponent;

    private Builder() {}

    public MainActivityComponent build() {
      if (appComponent == null) {
        throw new IllegalStateException(AppComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerMainActivityComponent(this);
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }
  }
}
